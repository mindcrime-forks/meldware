<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server
    PUBLIC "-//JBoss//DTD MBean Service 4.0//EN"
    "http://www.jboss.org/j2ee/dtd/jboss-service_4_0.dtd">

<server>

<!--
Buni Meldware 1.0 milestone 8 configruation.
Please see http://www.buni.org/mediawiki/index.php/Meldware_Installation_Guide_v_1.0M8 for more
configuration details.
-->

#if($SMTP_TLS_ENABLED.equals("true") || $POP_TLS_ENABLED.equals("true") || $SMTP_SSL_ENABLED.equals("true") || $POP_SSL_ENABLED.equals("true") || $IMAP_SSL_ENABLED.equals("true"))
  <!-- The SSL domain setup -->
  <mbean code="org.jboss.security.plugins.JaasSecurityDomain"
      name="meldware.mail:service=JaasSecurityDomain,name=Mail+SSL">
    <constructor>
       <arg type="java.lang.String" value="Mail+SSL"/>
    </constructor>
    <attribute name="KeyStoreURL">${jboss.server.home.dir}/conf/${KEYSTORE_PATH}</attribute>
    <attribute name="KeyStorePass">${KEYSTORE_PASS}</attribute>
  </mbean>
#end

<!-- if($MAIL_LIST_ENABLED.equals("true")) -->
  <mbean code="org.buni.meldware.mail.maillist.hn.HnMailListManager"
         name="meldware.mail:type=MailServices,name=MailListManager">
  </mbean>
<!-- end -->


<!--
 Queue for messages meant for a mail list hosted by this server
-->
  <mbean code="org.jboss.mq.server.jmx.Queue"
         name="jboss.mq.destination:service=Queue,name=maillist">
    <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>

<!--
 Queue for messages which will be delivered to users in a domain served by this
 server. (local users with an account here)
-->
  <mbean code="org.jboss.mq.server.jmx.Queue"
         name="jboss.mq.destination:service=Queue,name=localMail">
    <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  
  <mbean code="org.jboss.mq.server.jmx.Queue"
         name="jboss.mq.destination:service=Queue,name=remoteMail">
    <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  
<!--
 Local domain group.  The server will try to deliver any message to any user
with the exact string in the @ clause locally.  
-->
  <mbean code="org.buni.meldware.mail.domaingroup.DomainGroup"
    interface="org.buni.meldware.mail.domaingroup.DomainGroupMBean"
    name="meldware.mail:type=DomainGroup,name=DomainGroup,group=Local">
     <attribute name="Postmaster">${POSTMASTER_ADDRESS}</attribute>
     <attribute name="Domains">
        <domains includes-local-interfaces="true">
#if($DOMAIN_1.equals("") == false)
          <domain>${DOMAIN_1}</domain>
#end
#if($DOMAIN_2.equals("") == false)
          <domain>${DOMAIN_2}</domain>
#end
#if($DOMAIN_3.equals("") == false)
          <domain>${DOMAIN_3}</domain>
#end
#if($DOMAIN_4.equals("") == false)
          <domain>${DOMAIN_4}</domain>
#end
#if($DOMAIN_5.equals("") == false)
          <domain>${DOMAIN_5}</domain>
#end
        </domains>
     </attribute>
  </mbean>

#if($RELAY_BY_DOMAIN_ENABLED.equals("true"))
  <!--
   Relay domain group.
  -->
  <mbean code="org.buni.meldware.mail.domaingroup.DomainGroup"
    interface="org.buni.meldware.mail.domaingroup.DomainGroupMBean"
    name="meldware.mail:type=DomainGroup,name=RelayDomainGroup,group=Relay">
     <attribute name="Domains">
        <domains includes-local-interfaces="false">
#if($RELAY_DOMAIN_1.equals("") == false)
          <domain>${RELAY_DOMAIN_1}</domain>
#end
#if($RELAY_DOMAIN_2.equals("") == false)
          <domain>${RELAY_DOMAIN_2}</domain>
#end
#if($RELAY_DOMAIN_3.equals("") == false)
          <domain>${RELAY_DOMAIN_3}</domain>
#end
#if($RELAY_DOMAIN_4.equals("") == false)
          <domain>${RELAY_DOMAIN_4}</domain>
#end
        </domains>
     </attribute>
  </mbean>
#end

#if($ROUTING_ENABLED.equals("true"))
#if($ROUTE_BY_DOMAIN)
  <mbean code="org.buni.meldware.mail.domaingroup.DomainGroup"
    interface="org.buni.meldware.mail.domaingroup.DomainGroupMBean"
    name="meldware.mail:type=DomainGroup,name=RouteDomainGroup,group=Route">
     <attribute name="Postmaster">postmaster@localhost.localdomain</attribute>
     <attribute name="Domains">
        <domains includes-local-interfaces="false">
#if($ROUTE_DOMAIN_1.equals("") == false)
          <domain>${ROUTE_DOMAIN_1}</domain>
#end
#if($ROUTE_DOMAIN_2.equals("") == false)
          <domain>${ROUTE_DOMAIN_2}</domain>
#end
#if($ROUTE_DOMAIN_3.equals("") == false)
          <domain>${ROUTE_DOMAIN_3}</domain>
#end
#if($ROUTE_DOMAIN_4.equals("") == false)
          <domain>${ROUTE_DOMAIN_4}</domain>
#end
        </domains>
     </attribute>
  </mbean>
#end

  <mbean code="org.buni.meldware.mail.smtp.sender.SMTPRouteImpl"
    name="meldware.mail:type=MailServices,name=SMTPRoute" xmbean-dd="META-INF/route-xmbean.xml">
      <attribute name="Hostname">${ROUTE_HOST}</attribute>
#if($ROUTE_BY_DOMAIN)
      <depends optional-attribute-name="DomainGroup"
                 proxy-type="attribute">meldware.mail:type=DomainGroup,name=RouteDomainGroup,group=Route</depends>
#else
      <attribute name="RouteAll">true</attribute>
#end
  </mbean>
#end

  <mbean code="org.buni.meldware.mail.userrepository.jaas.JaasUserRepository"
    interface="org.buni.meldware.mail.userrepository.jaas.JaasUserRepositoryMBean"
    name="meldware.mail:type=UserRepository,name=UserRepository">
    <depends>jboss.security:service=JaasSecurityManager</depends>
    <depends>meldware.mail:type=SecurityConfig,name=LoginConfig</depends>
        <attribute name="SecurityDomain">meldware</attribute>
  </mbean>

#if($POP_ENABLED.equals("true") || $POP_SSL_ENABLED.equals("true"))
   <mbean code="org.jboss.security.auth.login.DynamicLoginConfig"
      name="meldware.mail:type=SecurityConfig,name=APOPLoginConfig">
      <attribute name="PolicyConfig" serialDataType="jbxb">
         <jaas:policy
            xsi:schemaLocation="urn:jboss:security-config:4.1 resource:security-config_4_1.xsd"
            xmlns:jaas="urn:jboss:security-config:4.1"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            >
            <jaas:application-policy name="meldware-apop">
               <jaas:authentication>
                <jaas:login-module code="org.jboss.security.auth.spi.DatabaseServerLoginModule"
                    flag="required">
                        <jaas:module-option name="dsJndiName">java:/${JAAS_DATASOURCE_NAME}</jaas:module-option>
                        <jaas:module-option name="principalsQuery">SELECT PASSWORD FROM MAIL_USERS WHERE USER_NAME=?</jaas:module-option>
                        <jaas:module-option name="rolesQuery">SELECT ROLE_NAME, 'Roles' FROM MAIL_ROLES WHERE USER_NAME=?</jaas:module-option>
                        <jaas:module-option name="unauthenticatedIdentity">guest</jaas:module-option>
                         <jaas:module-option name="callback.option.serviceName">meldware.mail:type=UserRepository,name=APOPUserRepository</jaas:module-option>
                         <jaas:module-option name="storeDigestCallback">org.buni.meldware.mail.userrepository.jaas.ApopDigestCallback</jaas:module-option>
                         <jaas:module-option name="hashUserPassword">false</jaas:module-option>
                         <jaas:module-option name="hashStorePassword">true</jaas:module-option>
                         <jaas:module-option name="hashAlgorithm">MD5</jaas:module-option>
                         <jaas:module-option name="hashEncoding">HEX</jaas:module-option>
                 </jaas:login-module>
               </jaas:authentication>
            </jaas:application-policy>
         </jaas:policy>
      </attribute>
      <depends optional-attribute-name="LoginConfigService">
         jboss.security:service=XMLLoginConfig
      </depends>
      <depends optional-attribute-name="SecurityManagerService">
         jboss.security:service=JaasSecurityManager
      </depends>
      <!-- prevent startup before the tables are created -->
      <depends>meldware.mail:type=MailServices,name=UserEditor</depends>
   </mbean>


  <mbean code="org.buni.meldware.mail.userrepository.jaas.JaasUserRepository"
    name="meldware.mail:type=UserRepository,name=APOPUserRepository">
    <depends>jboss.security:service=JaasSecurityManager</depends>
    <depends>meldware.mail:type=SecurityConfig,name=APOPLoginConfig</depends>
        <attribute name="SecurityDomain">meldware-apop</attribute>
  </mbean>
#end

#if($IMAP_ENABLED.equals("true") || $IMAP_SSL_ENABLED.equals("true"))
   <mbean code="org.jboss.security.auth.login.DynamicLoginConfig"
      name="meldware.mail:type=SecurityConfig,name=SASLLoginConfig">
      <attribute name="PolicyConfig" serialDataType="jbxb">
         <jaas:policy
            xsi:schemaLocation="urn:jboss:security-config:4.1 resource:security-config_4_1.xsd"
            xmlns:jaas="urn:jboss:security-config:4.1"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            >
            <jaas:application-policy name="meldware-sasl">
               <jaas:authentication>
                <jaas:login-module code="org.buni.meldware.mail.userrepository.jaas.SaslLoginModule"
                    flag="required">
                        <jaas:module-option name="dsJndiName">java:/${JAAS_DATASOURCE_NAME}</jaas:module-option>
                        <jaas:module-option name="principalsQuery">SELECT PASSWORD FROM MAIL_USERS WHERE USER_NAME=?</jaas:module-option>
                        <jaas:module-option name="rolesQuery">SELECT ROLE_NAME, 'Roles' FROM MAIL_ROLES WHERE USER_NAME=?</jaas:module-option>
                        <jaas:module-option name="unauthenticatedIdentity">guest</jaas:module-option>
                        <jaas:module-option name="hostname">${SERVER_NAME}</jaas:module-option>
                 </jaas:login-module>
               </jaas:authentication>
            </jaas:application-policy>
         </jaas:policy>
      </attribute>
      <depends optional-attribute-name="LoginConfigService">
         jboss.security:service=XMLLoginConfig
      </depends>
      <depends optional-attribute-name="SecurityManagerService">
         jboss.security:service=JaasSecurityManager
      </depends>
      <!-- prevent startup before the tables are created -->
      <depends>meldware.mail:type=MailServices,name=UserEditor</depends>
   </mbean>
#end

  	<mbean code="org.buni.meldware.mail.JPAServiceImpl"
  	       interface="org.buni.meldware.mail.JPAService"
  		   name="meldware.mail:type=JPAService,name=JPAService">
        <depends>jboss.j2ee:module=mailbeans.jar,service=EJB3</depends>
        <attribute name="EntityManagerName">java:/EntityManagers/mail</attribute>
  	</mbean>
    
 
#if($STORE_TYPE.equals("DB") && ($DATABASE_TYPE.equals("mysql") || $DATABASE_TYPE.equals("hsqldb")))
	<!-- 
		Hibernate based store that uses a Paging mechanism 
		to achieve partial I/O across a range of databases
	-->
	<mbean code="org.buni.meldware.mail.store.paged.PagedStore"
		name="meldware.mail:type=MailServices,name=PagedStore">
        <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
		<attribute name="PageSize">65535</attribute>
		<attribute name="Compress">false</attribute>
		<attribute name="CompressBufferSize">65535</attribute>
		<attribute name="StartIndex">0</attribute>
		<attribute name="Hashed">false</attribute>
	</mbean>
#end

#if($STORE_TYPE.equals("file"))
        <mbean code="org.buni.meldware.mail.store.file.FileStoreImpl"
                name="meldware.mail:type=MailServices,name=FileStore" xmbean-dd="META-INF/FileStore-xmbean.xml">
        <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
#if($FILESTORE_PATH.equals("") == false) 
                <attribute name="Path">${FILESTORE_PATH}</attribute>
#end
#if($FILESTORE_PATH.equals("") == true) 
                <attribute name="Path">${INSTALL_PATH}/server/${SERVER_CONFIG}/data</attribute>
#end
                <attribute name="AttemptsPerAllocate">1</attribute>
                <attribute name="PageSize">65535</attribute>
                <attribute name="Compress">false</attribute>
                <attribute name="CompressBufferSize">65535</attribute>
                <attribute name="StartIndex">0</attribute>
                <attribute name="Hashed">false</attribute>
        </mbean>
#end
	
#if($STORE_TYPE.equals("DB") && $DATABASE_TYPE.equals("postgresql"))
  	<mbean code="org.buni.meldware.mail.store.jdbc3.JDBC3Store"
  		name="meldware.mail:type=MailServices,name=PostgreSQLStore">
        <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
	  	<attribute name="PageSize">32384</attribute> 
	  	<attribute name="Compress">false</attribute>
	  	<attribute name="CompressBufferSize">8192</attribute>
	  	<attribute name="ReadStatement">SELECT ID, DATA FROM BLOB_MAIL_STORE WHERE ID = ?</attribute>
	  	<attribute name="WriteStatement">SELECT ID, DATA FROM BLOB_MAIL_STORE WHERE ID = ? FOR UPDATE</attribute>
	  	<attribute name="IdColumn">ID</attribute>
	  	<attribute name="BlobColumn">DATA</attribute>
	  	<attribute name="UseStreams">false</attribute>
	  	<attribute name="Connected">false</attribute>
	  	<attribute name="StartIndex">1</attribute>
  	</mbean>
#end
	
#if($STORE_TYPE.equals("DB") && $DATABASE_TYPE.equals("oracle"))
	<!-- Store using the JDBC3 Blob Store with the Oracle Database -->
  	<mbean code="org.buni.meldware.mail.store.jdbc3.JDBC3Store"
  		name="meldware.mail:type=MailServices,name=JDBC3Store,db=Oracle">
        <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
	  	<attribute name="PageSize">32384</attribute> 
	  	<attribute name="Compress">false</attribute>
	  	<attribute name="CompressBufferSize">8192</attribute>
	  	<attribute name="ReadStatement">SELECT ID, DATA FROM BLOB_MAIL_STORE WHERE ID = ?</attribute>
	  	<attribute name="WriteStatement">SELECT ID, DATA FROM BLOB_MAIL_STORE WHERE ID = ? FOR UPDATE</attribute>
	  	<attribute name="IdColumn">ID</attribute>
	  	<attribute name="BlobColumn">DATA</attribute>
	  	<attribute name="UseStreams">false</attribute>
	  	<attribute name="Connected">false</attribute>
	  	<attribute name="StartIndex">1</attribute>
  	</mbean>
#end
  
  	<!-- Mail Body Manager -->
  	<mbean code="org.buni.meldware.mail.message.MailBodyManagerImpl"
  		name="meldware.mail:type=MailBodyManager,name=MailBodyManager">
        <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
#if($STORE_TYPE.equals("file"))
  		<depends optional-attribute-name="Store" 
  			proxy-type="attribute">meldware.mail:type=MailServices,name=FileStore</depends>
#end
#if($STORE_TYPE.equals("DB") && ($DATABASE_TYPE.equals("mysql")||$DATABASE_TYPE.equals("hsqldb")))
  		<depends optional-attribute-name="Store" 
  			proxy-type="attribute">meldware.mail:type=MailServices,name=PagedStore</depends>
#end
#if($STORE_TYPE.equals("DB") && $DATABASE_TYPE.equals("postgresql"))
  		<depends optional-attribute-name="Store" 
  			proxy-type="attribute">meldware.mail:type=MailServices,name=PostgreSQLStore</depends>
#end
#if($STORE_TYPE.equals("DB") && $DATABASE_TYPE.equals("oracle"))
  		<depends optional-attribute-name="Store" 
  			proxy-type="attribute">meldware.mail:type=MailServices,name=JDBC3Store,db=Oracle</depends>
#end
  	</mbean>
  	
  <mbean code="org.buni.meldware.mail.mailbox.NullEventBus"
         name="meldware.mail:type=EventBus,name=EventBus">
  </mbean>
  
  <!--
  <mbean code="org.buni.meldware.mail.mailbox.JGroupsEventBus"
         name="meldware.mail:type=EventBus,name=EventBus">
    <attribute name="Config">
         <Config>
            <UDP mcast_addr="228.1.2.4" mcast_port="45566"
               ip_ttl="8" ip_mcast="true"
               mcast_send_buf_size="800000" mcast_recv_buf_size="150000"
               ucast_send_buf_size="800000" ucast_recv_buf_size="150000"
               loopback="false"/>
            <PING timeout="2000" num_initial_members="3"
               up_thread="true" down_thread="true"/>
            <MERGE2 min_interval="10000" max_interval="20000"/>
            <FD shun="true" up_thread="true" down_thread="true"
               timeout="2500" max_tries="5"/>
            <VERIFY_SUSPECT timeout="3000" num_msgs="3"
               up_thread="true" down_thread="true"/>
            <pbcast.NAKACK gc_lag="50" retransmit_timeout="300,600,1200,2400,4800"
               max_xmit_size="8192"
               up_thread="true" down_thread="true"/>
            <UNICAST timeout="300,600,1200,2400,4800" window_size="100" min_threshold="10"
               down_thread="true"/>
            <pbcast.STABLE desired_avg_gossip="20000"
               up_thread="true" down_thread="true"/>
            <FRAG frag_size="8192"
               down_thread="true" up_thread="true"/>
            <pbcast.GMS join_timeout="5000" join_retry_timeout="2000"
               shun="true" print_local_addr="true"/>
            <pbcast.STATE_TRANSFER up_thread="true" down_thread="true"/>
         </Config>
    </attribute>
  </mbean>
  -->
  
  <mbean code="org.buni.meldware.mail.mailbox.MailboxServiceImpl"
         interface="org.buni.meldware.mail.mailbox.MailboxService"
         name="meldware.mail:type=MailboxManager,name=MailboxManager">
      <constructor>
          <arg type="int" value="5"/>
      </constructor>
      <depends optional-attribute-name="JPAService"
            proxy-type="attribute">meldware.mail:type=JPAService,name=JPAService</depends>
      <depends optional-attribute-name="BodyManager"
               proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
      <depends optional-attribute-name="EventBus"
               proxy-type="attribute">meldware.mail:type=EventBus,name=EventBus</depends>
      <depends>jboss:service=TransactionManager</depends>
      <attribute name="Hacks">$DATABASE_TYPE</attribute>
      <attribute name="DefaultHardSizeLimit">104857600</attribute>
      <attribute name="DefaultSoftSizeLimit">52428800</attribute>
      <attribute name="QuotaEnabled">true</attribute>
  </mbean>

  <!--
   JMS is used to asynchronously process mails, however the bodies are not stored via JMS as JBossMQ, the present
   JBosss messaging solution, doesn't do this efficiently.  This instance is to support nukes mail list integration.
   -->	


  <!--
   This JMS mail listener is used to pass things to the mail list processing plugins (MDBs). 
   -->
  <mbean code="org.buni.meldware.mail.maillistener.MailListJMSMailListener"
    name="meldware.mail:type=MailServices,name=MailListJMSListener">
    <constructor>
        <arg type="java.lang.String" value="java:/JmsXA"/>
        <arg type="boolean" value="true"/>
    </constructor>
    <attribute name="Destination">queue/maillist</attribute>
    <depends>jboss.mq:service=DestinationManager</depends>
    <depends>jboss.mq.destination:name=maillist,service=Queue</depends>
    <depends optional-attribute-name="MailListManager">meldware.mail:type=MailServices,name=MailListManager</depends>
    <depends optional-attribute-name="MailBodyManager"
    	proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
  </mbean> 
    

#if($GENERATE_CALENDAR_MAILLISTENER.equals("true"))
  <!--
   This is the Calendar mail listener is used to pass user resoponses to Calendar Server. 
   -->                                 
  <mbean code="org.buni.meldware.mail.maillistener.CalendarMailListener"
    name="meldware.mail:type=MailServices,name=CalendarMailListener">
    <depends optional-attribute-name="MailBodyManager"
             proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
    <attribute name="CalendarUser">${CALENDAR_MAILER_NAME}</attribute>
    <attribute name="ConnectionFactoryName">java:/JmsXA</attribute>
    <attribute name="DestinationType">queue</attribute>
    <attribute name="Destination">calendarResponse</attribute>
    
    <depends>jboss.mq:service=DestinationManager</depends>
    <depends>jboss.mq.destination:name=calendarResponse,service=Queue</depends>
  </mbean> 
#end

#if ($JASEN_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.spam.JasenFilterImpl"
    interface="org.buni.meldware.mail.spam.JasenFilter"
    name="meldware.mail:type=MailServices,name=JasenFilter">
    <depends optional-attribute-name="MailboxService"
             proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
    <attribute name="DataDirectory">${jboss.server.home.dir}/data/jasen</attribute>
    <!-- Every thing set to default -->
    <attribute name="JasenConfig">
      <jasen-config>
      </jasen-config>
    </attribute>
  </mbean>
#end
  
  <!--
   JMS is used to asynchronously process mails, however the bodies are not stored via JMS as JBossMQ, the present
   JBosss messaging solution, doesn't do this efficiently.  This is used for normal mail processing.
   -->	
  <mbean code="org.buni.meldware.mail.maillistener.JMSMailListener"
    name="meldware.mail:type=MailServices,name=MailListener">
    <constructor>
        <arg type="java.lang.String" value="java:/JmsXA"/>
        <arg type="boolean" value="true"/>
    </constructor>

    <depends>jboss.jca:service=ManagedConnectionFactory,name=JmsXA</depends>
    <depends>jboss.mq.destination:name=localMail,service=Queue</depends>
    <depends>jboss.mq.destination:name=remoteMail,service=Queue</depends>
    <depends optional-attribute-name="MailBodyManager"
    	proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
    <depends optional-attribute-name="DomainGroup"
    	proxy-type="attribute">meldware.mail:type=DomainGroup,name=DomainGroup,group=Local</depends>
     <!-- queue or topic -->
     <!--<attribute name="DestinationType">queue</attribute>-->
     <!-- posts which are OnServer meaning they are for our domain and presumably a "local" user
          and won't go through an additional SMTP server should be sent here -->
     <attribute name="OnServerPostDestination">queue/localMail</attribute>
     <!-- posts which are OffServer meaning they will go through an additional SMTP server before
          finally being received should go here -->
     <attribute name="OffServerPostDestination">queue/remoteMail</attribute>
     <!-- Specifies the retry policy for failed local mail recipients. You can add as many retryTime
          elements as you like. Each retryTime element specifies the time in seconds to wait before 
          redelivery, and they are processed from the top. Once you run out of retry entries a bounce 
          message is generated for the sender. In the configuration shown below, if a message fails
             it will retry after a minute, if the retry fails
             it will retry again after a further two minutes, if the retry fails
             it will retry after after a further ten minutes, if the retry fails
             it will retry after after a further hour, if the retry fails
             it will retry after after a further hour, if the retry fails
             it will generate a bounce message
      -->                     
     <attribute name="LocalRetryTimes">
        <localRetryTimes>
           <retryTime>60</retryTime>
           <retryTime>120</retryTime>
           <retryTime>600</retryTime>
           <retryTime>3600</retryTime>
           <retryTime>3600</retryTime>
        </localRetryTimes>
     </attribute>
     <!-- Specifies the retry policy for failed remote mail recipients. You can add as many retryTime
          elements as you like. Each retryTime element specifies the time in seconds to wait before 
          redelivery, and they are processed from the top. Once you run out of retry entries a bounce 
          message is generated for the sender. In the configuration shown below, if a message fails
             it will retry after a minute, if the retry fails
             it will retry again after a further two minutes, if the retry fails
             it will retry after after a further ten minutes, if the retry fails
             it will retry after after a further hour, if the retry fails
             it will retry after after a further hour, if the retry fails
             it will generate a bounce message
     -->                     
     <attribute name="RemoteRetryTimes">
        <remoteRetryTimes>
           <retryTime>60</retryTime>
           <retryTime>120</retryTime>
           <retryTime>600</retryTime>
           <retryTime>3600</retryTime>
           <retryTime>3600</retryTime>
        </remoteRetryTimes>
      </attribute>
  </mbean> 
  
  <mbean code="org.buni.meldware.mail.MailListenerChainService"
         interface="org.buni.meldware.mail.MailListenerChain"
       name="meldware.mail:type=MailListenerChain,name=MailListenerChain">
<!-- xmbean-dd="META-INF/chain-xmbean.xml"-->
       <depends>meldware.mail:type=MailServices,name=MailListener</depends>
       <attribute name="Listeners">
            <listeners>
                 <!-- Uncomment to allow replies to go to Nukes
                     <value>meldware.mail:type=MailServices,name=NukesPosterJMSListener</value>
                 -->
                 <listener>meldware.mail:type=MailServices,name=MailListener</listener>
            </listeners>
       </attribute>          
  </mbean>

  <!--
  	Mail Listener responsible for delivering mails to local mailboxes.
  -->
  <mbean code="org.buni.meldware.mail.mailhandler.localmailbox.LocalDelivery"
	name="meldware.mail:type=MailServices,name=LocalDelivery">
 	<depends optional-attribute-name="MailboxManager"
 	  proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
 	<depends optional-attribute-name="Router"
 	  proxy-type="org.buni.meldware.mail.MailListener">meldware.mail:type=MailServices,name=MailListener</depends>
#if($IMAP_ENABLED.equals("true") || $IMAP_SSL_ENABLED.equals("true"))
 	<attribute name="ParseMime">true</attribute>
#else
 	<attribute name="ParseMime">false</attribute>
#end
  </mbean>
  
  <!--
  	Mail Listener chain for mails to be delivered locally.
  	Any listeners that are specific to locally delivered mail should be
  	added here.  E.g. SPAM filtering.
  -->
  <mbean code="org.buni.meldware.mail.MailListenerChainService"
    name="meldware.mail:type=MailListenerChain,name=LocalDeliveryChain" xmbean-dd="META-INF/chain-xmbean.xml">
    <depends>meldware.mail:type=MailServices,name=LocalDelivery</depends>
    <attribute name="Listeners">
      <listeners>
#if($GENERATE_CALENDAR_MAILLISTENER.equals("true"))
        <listener>meldware.mail:type=MailServices,name=CalendarMailListener</listener>
#end
#if ($JASEN_ENABLED.equals("true"))
        <listener>meldware.mail:type=MailServices,name=JasenFilter</listener>
#end
        <listener>meldware.mail:type=MailServices,name=MailListJMSListener</listener>
        <listener>meldware.mail:type=MailListener,name=ServerActions</listener>
        <listener>meldware.mail:type=MailServices,name=LocalDelivery</listener>
      </listeners>
    </attribute>          
  </mbean>


<!--
 The SMTPSender MBean is used to send mails to remote hosts.  It also maintains
 the DNS server list.
-->
  <mbean code="org.buni.meldware.mail.smtp.sender.SMTPSender"
    name="meldware.mail:type=MailServices,name=SMTPSender">
     <!-- if no servers then uses the default DNS servers from the host's resolution path. -->
    <depends optional-attribute-name="MailBodyManager" 
    	     proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
#if($DNS_SERVER_1.equals("") == false || $DNS_SERVER_2.equals("") == false || $DNS_SERVER_3.equals("") == false)
     <attribute name="DNSServers">
         <servers>
#if($DNS_SERVER_1.equals("") == false)
           <server>$DNS_SERVER_1</server>
#end
#if($DNS_SERVER_2.equals("") == false)
           <server>$DNS_SERVER_2</server>
#end
#if($DNS_SERVER_3.equals("") == false)
           <server>$DNS_SERVER_3</server>
#end
#if($DNS_SERVER_4.equals("") == false)
           <server>$DNS_SERVER_4</server>
#end
         </servers>
     </attribute>
#end
#if($ROUTING_ENABLED.equals("true")) 
     <attribute name="DNSRoutes">
        <routes>
           <route>meldware.mail:type=MailServices,name=SMTPRoute</route>
        </routes>
     </attribute>
#end
     <attribute name="AllowAddressLookups">true</attribute>
  </mbean>


  <!--
  	Mail Listener responsible for delivering mails to remote addresses.
  -->
  <mbean code="org.buni.meldware.mail.mailhandler.remote.RemoteDelivery"
	name="meldware.mail:type=MailServices,name=RemoteDelivery">
 	<depends optional-attribute-name="Router"
 	  proxy-type="org.buni.meldware.mail.MailListener">meldware.mail:type=MailServices,name=MailListener</depends>
    <depends optional-attribute-name="DomainGroup"
      proxy-type="attribute">meldware.mail:type=DomainGroup,name=DomainGroup,group=Local</depends>
 	<depends optional-attribute-name="Sender"
 	  proxy-type="attribute">meldware.mail:type=MailServices,name=SMTPSender</depends>
  </mbean>
  
  <!--
  	Mail Listener chain for mails to be delivered remotely.
  -->
  <mbean code="org.buni.meldware.mail.MailListenerChainService"
    name="meldware.mail:type=MailListenerChain,name=RemoteDeliveryChain" xmbean-dd="META-INF/chain-xmbean.xml">
    <depends>meldware.mail:type=MailServices,name=RemoteDelivery</depends>
    <attribute name="Listeners">
      <listeners>
        <listener>meldware.mail:type=MailServices,name=RemoteDelivery</listener>
      </listeners>
    </attribute>
  </mbean>

  <mbean code="org.buni.meldware.mail.MailListenerChainService"
    name="meldware.mail:type=MailListenerChain,name=ListDeliveryChain" xmbean-dd="META-INF/chain-xmbean.xml">
    <depends>meldware.mail:type=MailServices,name=ListDelivery</depends>
    <attribute name="Listeners">
      <listeners>
        <listener>meldware.mail:type=MailServices,name=ListDelivery</listener>
        <listener>meldware.mail:type=MailServices,name=LocalDelivery</listener>
      </listeners>
    </attribute>
  </mbean>

  <mbean code="org.buni.meldware.mail.maillistener.MailListDelivery" interface="org.buni.meldware.mail.maillistener.MailListDeliveryMBean"
	name="meldware.mail:type=MailServices,name=ListDelivery">
    <depends optional-attribute-name="MailListManager"
      proxy-type="attribute">meldware.mail:type=MailServices,name=MailListManager</depends>
    <depends optional-attribute-name="DeliveryChain"
      proxy-type="attribute">meldware.mail:type=MailListenerChain,name=MailListenerChain</depends>
  </mbean>

#if($SMTP_ENABLED.equals("true"))
  <!--
    SMTPProtocol is used for a "Server" instance.  This is an unencrypted 
    protocol 
  -->
  <mbean code="org.buni.meldware.mail.smtp.SMTPProtocol"
    name="meldware.mail:type=Protocol,name=SMTPProtocol">
    
    <depends optional-attribute-name="DomainGroup"
    		 proxy-type="attribute">meldware.mail:type=DomainGroup,name=DomainGroup,group=Local</depends>
    <depends optional-attribute-name="MailBodyManager" 
    	     proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
    <depends optional-attribute-name="ListenerChain" 
             proxy-type="org.buni.meldware.mail.MailListenerChain">meldware.mail:type=MailListenerChain,name=MailListenerChain</depends>
  	<depends optional-attribute-name="UserRepository"
  			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
#if($RELAY_BY_DOMAIN_ENABLED.equals("true"))
  	<depends optional-attribute-name="RelayDomainGroup"
  			 proxy-type="attribute">meldware.mail:type=DomainGroup,name=RelayDomainGroup,group=Relay</depends>
#end
  			 
#if($SMTP_TLS_ENABLED.equals("true"))
    <depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
    <attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
#end
 <!--register the protocols you want to use -->
    <attribute name="Servername">${SERVER_NAME}</attribute>	
    <!-- 
      auth-required - optional, default = true:  Determines whether we require the
      user to login to the SMTP server in order to send the mail.  By default we
      do require it.  I'd rather folks say that JBMail doesn't work at all than
      say its an open relay....if YOU misconfigure it you CAN make it an open
      relay....Its going to warn you in big bold fat letters.  This is only 
      required to send mail to some SMTP server outside of your domain 
    -->
#if($RELAY_BY_DOMAIN_ENABLED.equals("true"))
    <attribute name="AuthRequired">false</attribute>
#else
    <attribute name="AuthRequired">true</attribute>
#end
    <!--
      JBMail can not be configured as an open relay, you must specify a list of domains
      to allow relaying to.
    -->
    <attribute name="RelayByDomain">${RELAY_BY_DOMAIN_ENABLED.equals("true")}</attribute>
    <!--
      auth-allowed means that users are allowed to login.  This is othogonal to AuthRequired.
      Where AuthRequired means "auth required in order to send mail", AuthAllowed means 
      "is anyone able to log in at all?"  A completely open relay (spam machine) would not 
      require authenticaiton and might not even allow it (so it can't be tracked or whatever).  
      One reason to FORBID authentication is if you want users to only authenticate over SSL but 
      want a seperate instance of SMTP (on the same box even) to receive mails from the outside for
      local users.
    -->
    <attribute name="AuthAllowed">${SMTP_AUTH_ALLOWED}</attribute>
    <!-- 
      auth methods allowed.  DO NOT CHANGE THIS (unless you really know what 
      you are doing and have a very good reason to)
    -->
    <attribute name="AuthMethods">AUTH LOGIN PLAIN</attribute>
  		
    <!-- verify the identity -->
    <attribute name="VerifyIdentity">${SMTP_VERIFY_IDENTITY}</attribute>
    <attribute name="MaxMessageSize">10000000</attribute>
    <!-- block size for messages (should be about your average message size)   -->
    <attribute name="BlockSize">4096</attribute>
    <!-- rfc 2487 related properties -->
    <attribute name="RequireTls">${SMTP_TLS_REQUIRED}</attribute>
    <attribute name="RequireTlsForAuth">${SMTP_TLS_REQUIRED_AUTH}</attribute>
    <attribute name="RequireClientCert">false</attribute> 
    <!-- change to true for TLS support -->
    <attribute name="TlsEnabled">${SMTP_TLS_ENABLED.equals("true")}</attribute>                  
    <attribute name="Postmaster">${POSTMASTER_ADDRESS}</attribute>  
    <!-- 
      The maximum number of received headers allowed (to avoid looping). 
      If greater than this the message is not accepted. Default is 100 if not present
    -->
    <attribute name="MaxReceivedHdrs">100</attribute>  
    <!-- 
      The number of received headers before we start inspecting them looking
      for our server to see if more than maxOwnReceivedHdrs are present
      Default is 20 if not present 
    -->
    <attribute name="ReceivedHdrsThreshold">20</attribute>  
    <!--
      The number of received headers for our server allowed.
      Default is 5 if not present
    -->
    <attribute name="MaxOwnReceivedHdrs">5</attribute>
  </mbean> 
#end

#if($SMTP_ENABLED.equals("true") || $SMTP_SSL_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.ThreadPool"
    interface="org.buni.meldware.mail.ThreadPoolMBean" 
         name="meldware.mail:type=ThreadPool,name=ThreadPoolSMTP">
         <attribute name="Initial">5</attribute>
         <attribute name="Min">5</attribute>
         <attribute name="Max">100</attribute>
         <attribute name="IdleKeepAlive">120000</attribute>
  </mbean>
#end

#if($SMTP_ENABLED.equals("true"))
  <!-- defines an SMTP server.  -->
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=SMTP">
    <depends optional-attribute-name="Protocol">meldware.mail:type=Protocol,name=SMTPProtocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolSMTP</depends>
      <!-- protocol should reference SMTP -->
     <!-- port to listen on -->
     <attribute name="Port">${SMTP_PORT}</attribute>
     <!-- which addresses to listen on 0.0.0.0 = all or localhost means only the localhost  -->
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- timeout between commands (not presently supported) -->
     <!-- note from mikea: rfc 821 sets strict guidelines on allowable timeouts -->
     <attribute name="Timeout">30000</attribute>
     <!-- timeout for the connection regardless of whether it is finished.  Thus it will kill the
          socket and thread mid-stream/operation.  This should be big enough to allow whatever the
          messages you're sending while defending against folks who might try to DoS your server 
          by keeping a large number of connections alive -->
     <!-- note from mikea: 10 mb in 120 seconds is about 100 kb/s - which may or may not be 
          the actual bandwidth achieved depending on server. therefore, i believe this value should 
	  be set somewhat higher to avoid timing out on 10mb emails, 
	  and other methods be used to detect DoS's -->
     <attribute name="Life">120000</attribute>
  </mbean> 
#end

#if($SMTP_SSL_ENABLED.equals("true"))
  <!--
    SMTPProtocol is used for a "Server" instance.  This is an unencrypted 
    protocol 
  -->
  <mbean code="org.buni.meldware.mail.smtp.SMTPProtocol"
    name="meldware.mail:type=Protocol,name=SMTPSSLProtocol">
        
    <depends optional-attribute-name="DomainGroup"
    		 proxy-type="attribute">meldware.mail:type=DomainGroup,name=DomainGroup,group=Local</depends>
    <depends optional-attribute-name="MailBodyManager" 
    	     proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
    <depends optional-attribute-name="ListenerChain" 
             proxy-type="org.buni.meldware.mail.MailListenerChain">meldware.mail:type=MailListenerChain,name=MailListenerChain</depends>
  	<depends optional-attribute-name="UserRepository"
  			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
  			 
    <depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
    <attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
    
 	<!--register the protocols you want to use -->
    <attribute name="Servername">${SERVER_NAME}</attribute>	
    <!-- 
      auth-required - optional, default = true:  Determines whether we require the
      user to login to the SMTP server in order to send the mail.  By default we
      do require it.  I'd rather folks say that JBMail doesn't work at all than
      say its an open relay....if YOU misconfigure it you CAN make it an open
      relay....Its going to warn you in big bold fat letters.  This is only 
      required to send mail to some SMTP server outside of your domain 
    -->
    <attribute name="AuthRequired">true</attribute>
    <!--
      auth-allowed means that users are allowed to login.  This is othogonal to AuthRequired.
      Where AuthRequired means "auth required in order to send mail", AuthAllowed means 
      "is anyone able to log in at all?"  A completely open relay (spam machine) would not 
      require authenticaiton and might not even allow it (so it can't be tracked or whatever).  
      One reason to FORBID authentication is if you want users to only authenticate over SSL but 
      want a seperate instance of SMTP (on the same box even) to receive mails from the outside for
      local users.
    -->
    <attribute name="AuthAllowed">true</attribute>
    <!--
      auth methods allowed.  DO NOT CHANGE THIS (unless you really know what 
      you are doing and have a very good reason to)
    -->
    <attribute name="AuthMethods">AUTH LOGIN PLAIN</attribute>
  		
    <!-- verify the identity -->
    <attribute name="VerifyIdentity">${SMTP_SSL_VERIFY_IDENTITY}</attribute>
    <attribute name="MaxMessageSize">10000000</attribute>
    <!-- block size for messages (should be about your average message size)   -->
    <attribute name="BlockSize">4096</attribute>
    <!-- rfc 2487 related properties -->
    <attribute name="RequireTls">false</attribute>
    <attribute name="RequireTlsForAuth">false</attribute>
    <attribute name="RequireClientCert">false</attribute> 
    <!-- change to true for TLS support -->
    <attribute name="TlsEnabled">false</attribute>                  
    <attribute name="Postmaster">${POSTMASTER_ADDRESS}</attribute>  
    <!-- 
      The maximum number of received headers allowed (to avoid looping). 
      If greater than this the message is not accepted. Default is 100 if not present
    -->
    <attribute name="MaxReceivedHdrs">100</attribute>  
    <!-- 
      The number of received headers before we start inspecting them looking
      for our server to see if more than maxOwnReceivedHdrs are present
      Default is 20 if not present 
    -->
    <attribute name="ReceivedHdrsThreshold">20</attribute>  
    <!--
      The number of received headers for our server allowed.
      Default is 5 if not present
    -->
    <attribute name="MaxOwnReceivedHdrs">5</attribute>
  </mbean> 
#end


#if($SMTP_SSL_ENABLED.equals("true"))
  <!-- defines an SMTP server.  -->
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=SMTPSSL">
     <!-- protocol should reference SMTP/SSL -->
    <depends optional-attribute-name="Protocol">meldware.mail:type=Protocol,name=SMTPSSLProtocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolSMTP</depends>
     <!-- Secure servers require a security domain -->
     <attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
     <!-- port to listen on -->
     <attribute name="Port">${SMTP_SSL_PORT}</attribute>
     <!-- which addresses to listen on 0.0.0.0 = all or localhost means only the localhost  -->
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- timeout between commands (not presently supported) -->
     <!-- note from mikea: rfc 821 sets strict guidelines on allowable timeouts -->
     <attribute name="Timeout">30000</attribute>
     <!-- timeout for the connection regardless of whether it is finished.  Thus it will kill the
          socket and thread mid-stream/operation.  This should be big enough to allow whatever the
          messages you're sending while defending against folks who might try to DoS your server 
          by keeping a large number of connections alive -->
     <!-- note from mikea: 10 mb in 120 seconds is about 100 kb/s - which may or may not be 
          the actual bandwidth achieved depending on server. therefore, i believe this value should 
	  be set somewhat higher to avoid timing out on 10mb emails, 
	  and other methods be used to detect DoS's -->
     <attribute name="Life">120000</attribute>
     <attribute name="UsesSSL">true</attribute>
  </mbean> 
#end

#if($POP_ENABLED.equals("true") || $POP_SSL_ENABLED.equals("true") || $IMAP_ENABLED.equals("true") || $IMAP_SSL_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.ThreadPool"
    interface="org.buni.meldware.mail.ThreadPoolMBean" 
         name="meldware.mail:type=ThreadPool,name=ThreadPoolPOP">
         <attribute name="Initial">5</attribute>
         <attribute name="Min">5</attribute>
         <attribute name="Max">10</attribute>
         <attribute name="IdleKeepAlive">120000</attribute>
  </mbean>
#end

#if($POP_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.pop3.POP3Protocol"
    name="meldware.mail:type=Protocol,name=POP3Protocol">
#end
#if($POP_TLS_ENABLED.equals("true") && $POP_ENABLED.equals("true"))
   		<depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
   		<attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
#end
#if($POP_ENABLED.equals("true"))
    <depends>meldware.mail:type=MailServices,name=MailListener</depends>
    <depends optional-attribute-name="MailboxManager" 
    	proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
   	<depends optional-attribute-name="UserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
   	<depends optional-attribute-name="APOPUserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=APOPUserRepository</depends>
 	<!--register the protocols you want to use -->
  	<attribute name="Servername">${SERVER_NAME}</attribute>
  	<attribute name="TlsEnabled">${POP_TLS_ENABLED.equals("true")}</attribute>       
        <attribute name="RequireTls">${POP_TLS_REQUIRED}</attribute>
        <!-- enable for forcing clients to use their own certificats -->
  	<attribute name="RequireClientCert">false</attribute> 
  </mbean>
#end

#if($POP_SSL_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.pop3.POP3Protocol"
    name="meldware.mail:type=Protocol,name=POP3SSLProtocol">
   		<depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
   		<attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
    <depends>meldware.mail:type=MailServices,name=MailListener</depends>
    <depends optional-attribute-name="MailboxManager" 
    	proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
   	<depends optional-attribute-name="UserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
   	<depends optional-attribute-name="APOPUserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=APOPUserRepository</depends>
	<!--register the protocols you want to use -->
  	<attribute name="Servername">${SERVER_NAME}</attribute>
        <!-- never enable for POP/SSL) -->
  	<attribute name="TlsEnabled">false</attribute>       
  	<attribute name="RequireClientCert">false</attribute> 
  </mbean>
#end
  
#if($POP_SSL_ENABLED.equals("true"))
  <!-- defines a POP/SSL server.  Differs from a TLS supporting POP server as 
       it is ALWAYS encrypted, even from the start -->
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=POP3SSL">
    <depends optional-attribute-name="Protocol">meldware.mail:type=Protocol,name=POP3SSLProtocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolPOP</depends>
     <!-- Secure servers require a security domain -->
     <attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
     <!-- port to listen on -->
     <attribute name="Port">${POP_SSL_PORT}</attribute>
     <!-- which addresses to listen on 0.0.0.0 = all or localhost means only the localhost  -->
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- timeout between commands (not presently supported) -->
     <attribute name="Timeout">30000</attribute>
     <!-- timeout for the connection regardless of whether it is finished.  Thus it will kill the
          socket and thread mid-stream/operation.  This should be big enough to allow whatever the
          messages you're sending while defending against folks who might try to DoS your server 
          by keeping a large number of connections alive -->
     <attribute name="Life">120000</attribute>
   		<depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
     <attribute name="UsesSSL">true</attribute>
  </mbean>
#end

#if($POP_ENABLED.equals("true"))
  <!-- defines a POP server. -->
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=POP3">
    <depends>meldware.mail:type=Protocol,name=POP3Protocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolPOP</depends>
     <!-- options are presently POP or SMTP, we want POP -->
     <attribute name="Protocol">meldware.mail:type=Protocol,name=POP3Protocol</attribute>
     <!-- port to listen on -->
     <attribute name="Port">${POP_PORT}</attribute>
     <!-- which addresses to listen on 0.0.0.0 = all or localhost means only the localhost  -->
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- timeout between commands (not presently supported) -->
     <attribute name="Timeout">30000</attribute>
     <!-- timeout for the connection regardless of whether it is finished.  Thus it will kill the
          socket and thread mid-stream/operation.  This should be big enough to allow whatever the
          messages you're sending while defending against folks who might try to DoS your server 
          by keeping a large number of connections alive -->
     <attribute name="Life">120000</attribute>
     <attribute name="UsesSSL">false</attribute>
  </mbean>
#end

#if($FETCHMAIL_ENABLED.equals("true"))
   <mbean code="org.buni.meldware.mail.fetchmail.Popper"
        name="meldware.mail:type=Fetchmail,name=Popper,instance=installer">
        <attribute name="Servername">${FETCHMAIL_HOST}</attribute>
        <attribute name="PopPort">${FETCHMAIL_PORT}</attribute>
        <attribute name="PopUser">${FETCHMAIL_REMOTE_USER}</attribute>
        <attribute name="Password">${FETCHMAIL_REMOTE_PASS}</attribute>
        <attribute name="LocalUser">${FETCHMAIL_LOCAL_USER}</attribute>
#if($FETCHMAIL_LEAVE_ON)
        <attribute name="DeleteAfterPop">false</attribute>
#else
        <attribute name="DeleteAfterPop">true</attribute>
#end
        <depends optional-attribute-name="SMTPProtocol"
                 proxy-type="org.buni.meldware.mail.smtp.SMTPProtocolMBean">meldware.mail:type=Protocol,name=SMTPProtocol</depends>
        </mbean>

  <mbean code="org.jboss.varia.scheduler.Scheduler"
         name="meldware.mail:service=Scheduler,name=Popper,instance=installer">
    <attribute name="StartAtStartup">true</attribute>
                <!-- this needs to match your Popper instance's mbean name -->
    <attribute name="SchedulableMBean">meldware.mail:type=Fetchmail,name=Popper,instance=installer</attribute>
    <attribute name="SchedulableMBeanMethod">pop()</attribute>
    <attribute name="InitialStartDate">NOW</attribute>
    <attribute name="SchedulePeriod">${FETCHMAIL_POLL}000</attribute>
    <attribute name="InitialRepetitions">-1</attribute>
  </mbean>
#end 

<!-- fetchmail example see http://wiki.jboss.org/wiki/Wiki.jsp?page=HowToConfigurePOPFetchmailForJBossMailServer1.0M4 for details
   <mbean code="org.buni.meldware.mail.fetchmail.Popper"
        name="meldware.mail:type=Fetchmail,name=Popper,instance=example">       must be unique 
        <attribute name="Servername">foo.nowhere.com</attribute>
        <attribute name="PopPort">110</attribute>
        <attribute name="PopUser">remoteuser</attribute>
        <attribute name="Password">mypassword</attribute>
        <attribute name="LocalUser">andy@localhost</attribute>
        <attribute name="DeleteAfterPop">false</attribute>
        <depends optional-attribute-name="SMTPProtocol"
                 proxy-type="org.buni.meldware.mail.smtp.SMTPProtocolMBean">meldware.mail:type=Protocol,name=SMTPProtocol</depends>
        </mbean>

<mbean code="org.jboss.varia.scheduler.Scheduler"
         name="meldware.mail:service=Scheduler,name=Popper,instance=example">     unique 
    <attribute name="StartAtStartup">true</attribute>
this needs to match your Popper instance's mbean name
    <attribute name="SchedulableMBean">meldware.mail:type=Fetchmail,name=Popper,instance=example</attribute>
    <attribute name="SchedulableMBeanMethod">pop()</attribute>
    <attribute name="InitialStartDate">NOW</attribute>
    <attribute name="SchedulePeriod">10000</attribute>
    <attribute name="InitialRepetitions">-1</attribute>
  </mbean>
-->

#if($IMAP_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.imap4.IMAP4Protocol"
    name="meldware.mail:type=Protocol,name=IMAP4Protocol">
    <depends>meldware.mail:type=MailServices,name=MailListener</depends>
    <depends optional-attribute-name="MailboxManager" 
    	proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
   	<depends optional-attribute-name="UserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
  	<attribute name="Servername">${SERVER_NAME}</attribute>
  	<attribute name="TimingEnabled">true</attribute>
  </mbean>
#end

#if($IMAP_SSL_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.imap4.IMAP4Protocol"
    name="meldware.mail:type=Protocol,name=IMAP4SSLProtocol">
    <depends>meldware.mail:type=MailServices,name=MailListener</depends>
    <depends optional-attribute-name="MailboxManager" 
    	proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
   	<depends optional-attribute-name="UserRepository"
   			 proxy-type="attribute">meldware.mail:type=UserRepository,name=UserRepository</depends>
  	<attribute name="Servername">${SERVER_NAME}</attribute>
  	<attribute name="TimingEnabled">true</attribute>
  </mbean>
#end

#if($IMAP_SSL_ENABLED.equals("true"))
  <!-- defines a POP/SSL server.  Differs from a TLS supporting POP server as 
       it is ALWAYS encrypted, even from the start -->
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=IMAP4SSL">
    <depends optional-attribute-name="Protocol">meldware.mail:type=Protocol,name=IMAP4SSLProtocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolPOP</depends>
     <!-- Secure servers require a security domain -->
     <attribute name="SslDomain">java:/jaas/Mail+SSL</attribute>
     <!-- port to listen on -->
     <attribute name="Port">${IMAP_SSL_PORT}</attribute>
     <!-- which addresses to listen on 0.0.0.0 = all or localhost means only the localhost  -->
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- timeout between commands (not presently supported) -->
     <attribute name="Timeout">30000</attribute>
     <!-- timeout for the connection regardless of whether it is finished.  Thus it will kill the
          socket and thread mid-stream/operation.  This should be big enough to allow whatever the
          messages you're sending while defending against folks who might try to DoS your server 
          by keeping a large number of connections alive -->
     <attribute name="Life">120000</attribute>
   		<depends>meldware.mail:service=JaasSecurityDomain,name=Mail+SSL</depends>
     <attribute name="UsesSSL">true</attribute>
  </mbean>
#end

#if($IMAP_ENABLED.equals("true"))
  <mbean code="org.buni.meldware.mail.Server"
    name="meldware.mail:type=Service,name=IMAP">
    <depends>meldware.mail:type=Protocol,name=IMAP4Protocol</depends>
    <depends optional-attribute-name="ThreadPool"
             proxy-type="attribute">meldware.mail:type=ThreadPool,name=ThreadPoolPOP</depends>
     <attribute name="Protocol">meldware.mail:type=Protocol,name=IMAP4Protocol</attribute>
     <attribute name="Port">${IMAP_PORT}</attribute>
     <attribute name="Address">${SERVER_BIND_ADDRESS}</attribute>
     <!-- Default idle timeout 30 minutes -->
     <attribute name="Timeout">1800000</attribute>
     <!-- Default life timeout 60 minutes -->
     <attribute name="Life">3600000</attribute>
     <!-- 
     	Note that setting the life timeout is not spec compliant and can cause
        some problems with Novell Evolution.  To make the system spec compliant 
        set this value to something really large e.g. 31536000000 (1 year).
        We default this to 1 hour to try an help prevent DoS attacks.
     --> 
  </mbean> 
#end

  <mbean code="org.buni.meldware.mail.userapi.MailSenderImpl"
         interface="org.buni.meldware.mail.userapi.MailSender"
         name="meldware.mail:type=MailServices,name=MailSender" >
      <depends optional-attribute-name="ListenerChain"
               proxy-type="attribute">meldware.mail:type=MailListenerChain,name=MailListenerChain</depends>
      <depends optional-attribute-name="BodyManager"
               proxy-type="attribute">meldware.mail:type=MailBodyManager,name=MailBodyManager</depends>
      <depends optional-attribute-name="MailboxManager"
               proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
  </mbean>

  <mbean code="org.buni.meldware.mail.management.DumDOMImpl" interface="org.buni.meldware.mail.management.DumDOM" name="meldware.mail:type=MailServices,name=DumDOM">
         <attribute name="DeploymentURL">$INSTALL_PATH/server/$SERVER_CONFIG/deploy/mail.ear</attribute>
         <attribute name="ConfigFile">$INSTALL_PATH/server/$SERVER_CONFIG/deploy/mail.ear/mailjmx.sar/META-INF/jboss-service.xml</attribute>
  </mbean>

  <mbean code="org.buni.meldware.mail.management.AdminToolImpl" interface="org.buni.meldware.mail.management.AdminTool"
         name="meldware.mail:type=MailServices,name=AdminTool">
         <depends optional-attribute-name="DumDOM" proxy-type="attribute">meldware.mail:type=MailServices,name=DumDOM</depends>
         <depends optional-attribute-name="UserEditor"
                  proxy-type="attribute">meldware.mail:type=MailServices,name=UserEditor</depends>
  </mbean>

  <mbean code="org.buni.meldware.mail.maillistener.actions.ServerActionsMailListenerImpl" interface="org.buni.meldware.mail.maillistener.actions.ServerActionsMailListener"
         name="meldware.mail:type=MailListener,name=ServerActions">
    <depends optional-attribute-name="DataSource" proxy-type="attribute">jboss.jca:service=DataSourceBinding,name=${DATASOURCE_NAME}</depends>
    <depends optional-attribute-name="MailboxService"
 	  proxy-type="attribute">meldware.mail:type=MailboxManager,name=MailboxManager</depends>
    <attribute name="CreateUserActionSetsQuery">CREATE TABLE USER_ACTION_SETS (UAS_ID VARCHAR(64) PRIMARY KEY, UAS_USER VARCHAR(40) NOT NULL)</attribute>
    <attribute name="CreateActionSetsQuery">CREATE TABLE ACTION_SET (UA_ID VARCHAR(64) PRIMARY KEY, UAS_ID VARCHAR(64), UA_NAME VARCHAR(40), UA_ORDER INTEGER, UA_ALL BOOLEAN)</attribute>
    <attribute name="CreateConditionsQuery">CREATE TABLE CONDITIONS (C_ID VARCHAR(64) PRIMARY KEY, UA_ID VARCHAR(64), C_ORDER INTEGER, C_IGNORE_CASE BOOLEAN, C_NOT BOOLEAN, C_NAME VARCHAR(40), C_HEADER VARCHAR(40), C_VALUE VARCHAR(40))</attribute>
    <attribute name="CreateActionsQuery">CREATE TABLE ACTIONS (A_ID VARCHAR(64) PRIMARY KEY, UA_ID VARCHAR(64), A_ORDER INTEGER, A_NAME VARCHAR(40), A_PARAMS VARCHAR(256))</attribute>
    <attribute name="RetrieveUserActionSetsQuery">SELECT USER_ACTION_SETS.UAS_ID, USER_ACTION_SETS.UAS_USER, ACTION_SET.UA_ID, ACTION_SET.UA_NAME, ACTION_SET.UA_ORDER, ACTION_SET.UA_ALL from USER_ACTION_SETS left outer join ACTION_SET on USER_ACTION_SETS.UAS_ID = ACTION_SET.UAS_ID where USER_ACTION_SETS.UAS_USER in (select NAME from ALIAS where FOLDER_ID = ?) order by UA_ORDER asc</attribute>
    <attribute name="RetrieveConditionsQuery">SELECT C_ID, C_IGNORE_CASE, C_NOT, C_NAME, C_HEADER, C_VALUE from CONDITIONS where CONDITIONS.UA_ID = ? order by C_ORDER asc</attribute>
    <attribute name="RetrieveActionsQuery">SELECT A_ID, A_NAME, A_PARAMS FROM ACTIONS where UA_ID = ? ORDER BY A_ORDER asc</attribute>
    <attribute name="InsertUserActionSetsQuery">INSERT INTO USER_ACTION_SETS (UAS_ID, UAS_USER) VALUES (?, ?)</attribute>
    <attribute name="InsertActionSetQuery">INSERT INTO ACTION_SET(UA_ID, UAS_ID, UA_NAME, UA_ORDER, UA_ALL) VALUES (?, ?, ?, ?, ?)</attribute>
    <attribute name="InsertConditionQuery">INSERT INTO CONDITIONS (C_ID, UA_ID, C_ORDER, C_IGNORE_CASE, C_NOT, C_NAME, C_HEADER, C_VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?)</attribute>
    <attribute name="InsertActionQuery">INSERT INTO ACTIONS (A_ID, UA_ID, A_ORDER, A_NAME, A_PARAMS) VALUES (?, ?, ?, ?, ?)</attribute>
    <attribute name="DeleteActionSetQuery">DELETE FROM ACTION_SET where UA_ID = ?</attribute>
    <attribute name="DeleteConditionQuery">DELETE FROM CONDITIONS where C_ID = ?</attribute>
    <attribute name="DeleteActionQuery">DELETE FROM ACTIONS where A_ID = ?</attribute>
    <attribute name="DeleteUserActionSetsQuery">DELETE FROM USER_ACTION_SETS where UAS_USER = ?</attribute>
  </mbean>

  <mbean code="org.buni.meldware.mail.abmounts.SystemABMounts"
         interface="org.buni.meldware.mail.abmounts.SystemABMountsService"
         name="meldware.mail:type=systemMounts,name=abMounts">
     <attribute name="Handers">
       <handlers>
          <handler>org.buni.meldware.mail.abmounts.LocalABMountFactory</handler>
       </handlers>
     </attribute>
     <attribute name="Mounts">
        <abmounts>
            <abmount type="local" name="${DOMAIN_1}">
               <description>${DOMAIN_1}, global addressbook</description>
               <configuration><property key="ObjectName" value="buni.meldware:service=AddressBook"/></configuration>
               <domains>
#if($DOMAIN_1.equals("") == false)
          <domain>${DOMAIN_1}</domain>
#end
#if($DOMAIN_2.equals("") == false)
          <domain>${DOMAIN_2}</domain>
#end
#if($DOMAIN_3.equals("") == false)
          <domain>${DOMAIN_3}</domain>
#end
#if($DOMAIN_4.equals("") == false)
          <domain>${DOMAIN_4}</domain>
#end
#if($DOMAIN_5.equals("") == false)
          <domain>${DOMAIN_5}</domain>
#end
            </domains>
            </abmount>
         </abmounts>
     </attribute>
  </mbean>


</server>
